<!-- ANT BUILD FILE FOR THE SPINE PROJECT -->


<!-- set properties for this project -->
<project name="SPINE" default="run" basedir=".">
	<description>SPINE build file</description>
	<property file="build.properties" />
	<property name="ext.lib.dir" value="ext-lib" />
	<property name="path.tinyos.jar" value="${ext.lib.dir}/${tinyos.jar}" />
	<property name="path.bluecove.jar" value="${ext.lib.dir}/${bluecove.jar}" />

	<target name="checkTinyOsJarInExtLib_step2" description="shows missing file message and stops build" unless="tinyos.jar.present">
		<property name="missing.tinyos.file.error.msg" value="File ${tinyos.jar} is not available in the directory ${ext.lib.dir}." />
		<echo level="error">Build process can't continue.
${missing.tinyos.file.error.msg}
Download it from the URL specified in the README file and place it in the directory ${ext.lib.dir}.</echo>
		<fail message="${missing.tinyos.file.error.msg}" />
	</target>

	<target name="checkTinyOsJarInExtLib_step1">
		<condition property="tinyos.jar.present">
			<available file="${path.tinyos.jar}" />
		</condition>
		<antcall target="checkTinyOsJarInExtLib_step2" />
	</target>
	
	<target name="checkBluecoveJarInExtLib_step2" description="shows missing file message and stops build" unless="bluecove.jar.present">
			<property name="missing.bluecove.file.error.msg" value="File ${bluecove.jar} is not available in the directory ${ext.lib.dir}." />
			<echo level="error">Build process can't continue.
	${missing.bluecove.file.error.msg}
	Download it from the URL specified in the README file and place it in the directory ${ext.lib.dir}.</echo>
			<fail message="${missing.bluecove.file.error.msg}" />
		</target>

		<target name="checkBluecoveJarInExtLib_step1">
			<condition property="bluecove.jar.present">
				<available file="${path.bluecove.jar}" />
			</condition>
			<antcall target="checkBluecoveJarInExtLib_step2" />
		</target>

	<!--  _______________________________________________
                             compile
	_________________________________________________ -->
	<target name="compile" description="compile the java source files">
		<!-- Compile the java code from src into classes -->
		<antcall target="checkTinyOsJarInExtLib_step1" />
		<antcall target="checkBluecoveJarInExtLib_step1" />

		<mkdir dir="classes" />
		<javac srcdir="src" optimize="${javac.optimize}" debug="${javac.debug}" debuglevel="lines,vars,source" destdir="classes" deprecation="on">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${ext.lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!--  _______________________________________________
                             clean
	_________________________________________________ -->
	<target name="clean">
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="classes" defaultexcludes="no"/>
			<fileset dir="jar" />
		</delete>
	</target>

	<!--  _______________________________________________
                               jar
	_________________________________________________ -->
	<target name="jar" description="generate the jar files" depends="clean,compile">
		<!-- Compile the java code from src into classes -->
		<mkdir dir="jar" />
		<condition property="inclusion.level.0">
			<or>
				<equals arg1="${inclusion.level}" arg2="0"/>
				<equals arg1="${inclusion.level}" arg2="basic" casesensitive="false" trim="true"/>
			</or>
		</condition>
		<condition property="inclusion.level.1">
			<or>
				<equals arg1="${inclusion.level}" arg2="1"/>
				<equals arg1="${inclusion.level}" arg2="no-interface" casesensitive="false" trim="true"/>
			</or>
		</condition>
		<condition property="inclusion.level.2">
			<or>
				<equals arg1="${inclusion.level}" arg2="2"/>
				<equals arg1="${inclusion.level}" arg2="complete" casesensitive="false" trim="true"/>
			</or>
		</condition>
		<antcall target="basicJar"/>
		<antcall target="noInterfaceJar"/>
		<antcall target="fullJar"/>
	</target>
	
	<target name="basicJar" if="inclusion.level.0">
		<jar jarfile="jar/SPINE.jar">
			<fileset dir="classes">
				<!-- FIXME SPINE.jar includes an empty test directory, a way to delete this dir should be found -->
				<exclude name="test/" />
			</fileset>
			<fileset file="resources/defaults.properties"/>
		</jar>
	</target>

	<target name="noInterfaceJar" if="inclusion.level.1">
		<jar jarfile="jar/spineFramework1_3.jar">
			<fileset dir="classes">
				<exclude name="spine/communication/emu/**"/>
				<exclude name="spine/communication/tinyos/**"/>
				<exclude name="spine/payload/codec/emu/**"/>
				<exclude name="spine/payload/codec/tinyos/**"/>
				<exclude name="test/*.class" />
			</fileset>
			<fileset dir=".">
				<include name="resources/defaults.properties"/>
			</fileset>
			<zipfileset src="lib/localNodeAdapter.jar" includes="**/*.class" />
		</jar>
	</target>
	
	<target name="fullJar" if="inclusion.level.2">
		<jar jarfile="jar/SPINE.jar">
			<fileset dir="classes">
				<exclude name="test/*.class" />
			</fileset>
			<fileset dir=".">
				<include name="resources/defaults.properties"/>
			</fileset>
			<zipfileset src="lib/localNodeAdapter.jar" includes="**/*.class" />
		</jar>
	</target>


	<!--  _______________________________________________
                               doc
	_________________________________________________ -->
	<target name="doc" description="generate the javadoc files">
		<mkdir dir="doc" />
		<javadoc sourcepath="src" destdir="doc" doctitle="SPINE Signal Processing In Node Environment" author="true" windowtitle="SPINE Java API" packagenames="spine, spine.*, test">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${ext.lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>

		</javadoc>
	</target>


	<!--  _______________________________________________
                               run
	_________________________________________________ -->
	<target name="run" description="launch the java SpineTest" depends="compile">
		<java classname="test.SPINETest" fork="true">			
			<classpath>				
				<pathelement path="classes" />				
				<fileset dir="lib">					
					<include name="*.jar" />				
				</fileset>				
				<fileset dir="${ext.lib.dir}">					
					<include name="*.jar" />				
				</fileset>			
			</classpath>
		</java>	
	</target>


	<!--  _______________________________________________
                               dist
	_________________________________________________ -->
	<target name="dist" description="generate the distribution file" depends="jar,doc">
		<jar jarfile="../SPINE${version}.zip">
			<fileset dir="../" includes="COPYING" />
			<fileset dir="../" includes="License" />
			<fileset dir="../" includes="SPINE_manual.pdf" />
			<fileset dir="../" includes="Spine_nodes/apps/SPINEApp/**" />
			<fileset dir="../" includes="Spine_nodes/tos/**" />
			<fileset dir="../" includes="Spine_nodes/support/**" />
			<fileset dir="../" includes="Spine_nodes/*" />
			<fileset dir="../" includes="Spine_serverApp/doc/**" />
                        <fileset dir="../" includes="Spine_serverApp/jar/**" />
                        <fileset dir="../" includes="Spine_serverApp/lib/**" />
                        <fileset dir="../" includes="Spine_serverApp/resources/**" />
                        <fileset dir="../" includes="Spine_serverApp/src/**" />
			<fileset dir="../" includes="Spine_serverApp/*.properties" />
			<fileset dir="../" includes="Spine_serverApp/*.xml" />
			<fileset dir="../" includes="Spine_apps/**" excludes="**/bin/**, **/classes/**" />
		</jar>
	</target>

</project>
